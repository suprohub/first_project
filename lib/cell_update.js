"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const enums_1 = require("./enums");
const player_id = 'constant_player_id';
const password = 'password';
let move = (player_id == 0);
let last_data = enums_1.SyncData.GameStart;
console.log(player_id, move);
document.addEventListener("click", (mouse_event) => {
    console.log(move);
    if (move) {
        const target = mouse_event.target;
        if (target) {
            fetch(`${window.location.href}cell_update`, {
                method: "POST",
                body: `${target.id} ${player_id} ${password}`
            });
            move = false;
        }
    }
});
const sleep = (ms) => {
    return new Promise(resolve => setTimeout(resolve, ms));
};
const sleep_thread_burn = (ms) => {
    for (let e = new Date().getTime() + ms; new Date().getTime() <= e;) { }
};
const sync = async () => {
    for (;;) {
        if (!move) {
            let data = (await (await fetch(`${window.location.href}cell_sync`, { method: "POST" })).text()).split(" ");
            let sync_data = enums_1.SyncData.fromNumber(Number(data[0].replace("b", "")));
            let sync_player_id = enums_1.Player.fromNumber(Number(data[1]));
            if (sync_data == enums_1.SyncData.GameEnd) {
                const text = document.getElementById("win");
                text.innerHTML = `Выйграл игрок номер ${data[1]}`;
            }
            else if (sync_data != enums_1.SyncData.GameStart && last_data != enums_1.last_normal_data) {
                const button = document.getElementById(`b${data[0]}`);
                button.setAttribute("disabled", "true");
                button.innerHTML = sync_player_id.toString();
                console.log(sync_player_id, player_id, (player_id === 0) ? 1 : player_id - 1);
                if (sync_player_id == ((player_id == 0) ? 1 : 0)) {
                    move = true;
                }
                last_data = sync_data;
            }
        }
        await sleep(250);
    }
};
sync();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbF91cGRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9jZWxsX3VwZGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUE2RDtBQUM3RCxNQUFNLFNBQVMsR0FBUSxvQkFBb0IsQ0FBQztBQUM1QyxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUE7QUFDM0IsSUFBSSxJQUFJLEdBQUcsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDM0IsSUFBSSxTQUFTLEdBQUcsZ0JBQVEsQ0FBQyxTQUFTLENBQUM7QUFFbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDNUIsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFO0lBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDakIsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNQLE1BQU0sTUFBTSxHQUFpQixXQUFXLENBQUMsTUFBTyxDQUFDO1FBQ2pELElBQUksTUFBTSxFQUFFLENBQUM7WUFDVCxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksYUFBYSxFQUFFO2dCQUN4QyxNQUFNLEVBQUUsTUFBTTtnQkFDZCxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxJQUFJLFNBQVMsSUFBSSxRQUFRLEVBQUU7YUFDaEQsQ0FBQyxDQUFBO1lBQ0YsSUFBSSxHQUFHLEtBQUssQ0FBQTtRQUNoQixDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFBO0FBRUYsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFVLEVBQUUsRUFBRTtJQUN6QixPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNELENBQUMsQ0FBQTtBQUVELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxFQUFVLEVBQUUsRUFBRTtJQUN2QyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFJLENBQUMsQ0FBQSxDQUFDO0FBQ3pFLENBQUMsQ0FBQTtBQUVELE1BQU0sSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ3BCLFNBQVMsQ0FBQztRQUNOLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNSLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0csSUFBSSxTQUFTLEdBQUcsZ0JBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNyRSxJQUFJLGNBQWMsR0FBRyxjQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3ZELElBQUksU0FBUyxJQUFJLGdCQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ2hDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFnQixDQUFDO2dCQUMzRCxJQUFJLENBQUMsU0FBUyxHQUFHLHVCQUF1QixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtZQUNyRCxDQUFDO2lCQUFNLElBQUksU0FBUyxJQUFJLGdCQUFRLENBQUMsU0FBUyxJQUFJLFNBQVMsSUFBSSx3QkFBZ0IsRUFBRSxDQUFDO2dCQUMxRSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQWdCLENBQUM7Z0JBQ3JFLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFBO2dCQUN2QyxNQUFNLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtnQkFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsU0FBUyxFQUFFLENBQUMsU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQTtnQkFDNUUsSUFBSSxjQUFjLElBQUksQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO29CQUM5QyxJQUFJLEdBQUcsSUFBSSxDQUFBO2dCQUNmLENBQUM7Z0JBQ0QsU0FBUyxHQUFHLFNBQVMsQ0FBQTtZQUN6QixDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3BCLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixJQUFJLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsYXllciwgU3luY0RhdGEsIGxhc3Rfbm9ybWFsX2RhdGEgfSBmcm9tIFwiLi9lbnVtc1wiO1xuY29uc3QgcGxheWVyX2lkOiBhbnkgPSAnY29uc3RhbnRfcGxheWVyX2lkJztcbmNvbnN0IHBhc3N3b3JkID0gJ3Bhc3N3b3JkJ1xubGV0IG1vdmUgPSAocGxheWVyX2lkID09IDApXG5sZXQgbGFzdF9kYXRhID0gU3luY0RhdGEuR2FtZVN0YXJ0O1xuXG5jb25zb2xlLmxvZyhwbGF5ZXJfaWQsIG1vdmUpXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKG1vdXNlX2V2ZW50KSA9PiB7XG4gICAgY29uc29sZS5sb2cobW92ZSlcbiAgICBpZiAobW92ZSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSAoPEhUTUxFbGVtZW50Pm1vdXNlX2V2ZW50LnRhcmdldCk7XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgIGZldGNoKGAke3dpbmRvdy5sb2NhdGlvbi5ocmVmfWNlbGxfdXBkYXRlYCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgYm9keTogYCR7dGFyZ2V0LmlkfSAke3BsYXllcl9pZH0gJHtwYXNzd29yZH1gXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgbW92ZSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG59KVxuXG5jb25zdCBzbGVlcCA9IChtczogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG5jb25zdCBzbGVlcF90aHJlYWRfYnVybiA9IChtczogbnVtYmVyKSA9PiB7XG4gIGZvciAobGV0IGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIG1zOyBuZXcgRGF0ZSgpLmdldFRpbWUoKSA8PSBlOyApIHt9XG59IFxuXG5jb25zdCBzeW5jID0gYXN5bmMgKCkgPT4ge1xuICAgIGZvciAoOzspIHtcbiAgICAgICAgaWYgKCFtb3ZlKSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IChhd2FpdCAoYXdhaXQgZmV0Y2goYCR7d2luZG93LmxvY2F0aW9uLmhyZWZ9Y2VsbF9zeW5jYCwgeyBtZXRob2Q6IFwiUE9TVFwiIH0pKS50ZXh0KCkpLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgIGxldCBzeW5jX2RhdGEgPSBTeW5jRGF0YS5mcm9tTnVtYmVyKE51bWJlcihkYXRhWzBdLnJlcGxhY2UoXCJiXCIsIFwiXCIpKSlcbiAgICAgICAgICAgIGxldCBzeW5jX3BsYXllcl9pZCA9IFBsYXllci5mcm9tTnVtYmVyKE51bWJlcihkYXRhWzFdKSlcbiAgICAgICAgICAgIGlmIChzeW5jX2RhdGEgPT0gU3luY0RhdGEuR2FtZUVuZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndpblwiKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgICAgICAgICB0ZXh0LmlubmVySFRNTCA9IGDQktGL0LnQs9GA0LDQuyDQuNCz0YDQvtC6INC90L7QvNC10YAgJHtkYXRhWzFdfWBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3luY19kYXRhICE9IFN5bmNEYXRhLkdhbWVTdGFydCAmJiBsYXN0X2RhdGEgIT0gbGFzdF9ub3JtYWxfZGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBiJHtkYXRhWzBdfWApIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gc3luY19wbGF5ZXJfaWQudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN5bmNfcGxheWVyX2lkLCBwbGF5ZXJfaWQsIChwbGF5ZXJfaWQgPT09IDApPyAxIDogcGxheWVyX2lkIC0gMSlcbiAgICAgICAgICAgICAgICBpZiAoc3luY19wbGF5ZXJfaWQgPT0gKChwbGF5ZXJfaWQgPT0gMCk/IDEgOiAwKSkge1xuICAgICAgICAgICAgICAgICAgICBtb3ZlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0X2RhdGEgPSBzeW5jX2RhdGFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHNsZWVwKDI1MClcbiAgICB9XG59O1xuXG5zeW5jKCkiXX0=